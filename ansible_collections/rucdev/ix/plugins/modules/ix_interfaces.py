#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2023 AP Communications
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for ix_interfaces
"""

from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "<support_group>",
}

DOCUMENTATION = """
---
module: ix_interfaces
short_description: Resource module to configure interface.
description: This module manages the interface attributes of Nec Univerge IX network devices.
version_added: 1.1.0
author:
  - Yushi Takeda (@Rucdev)
note:
  - Tested against NEC IX 2105 version 10.2.39
options:
  config:
    description: A dictionary of interface options
    type: list
    elements: dict
    suboptions:
      name:
        description:
        - Full name of interface, like GigaEthernet1.1
        type: str
        required: true
      description:
        description:
        - Interface description.
        type: str
      enabled:
        description:
        - Administrative state of the interface.
        - Set the value to C(true) to administratively enable the interface or C(false)
          to disable it.
        type: bool
        default: true
      bandwidth:
        description:
        - This command doesn't limit bandwidth on interface.
        - The bandwidth is used calculate for MIB or cost.
        type: number
        required: false
      mtu:
        description:
        - MTU for a specific interface. Applicable for Ethernet interfaces only.
        - Refer to vendor documentation for valid values.
        type: int
  running_config:
    description:
      - This option is used only with state I(parsed).

    type: str

  state:
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    - rendered
    - gathered
    - parsed
    default: merged
    description:
      - The state the configuration should be left in
      - The states I(rendered), I(gathered) and I(parsed) does not perform any change
        on the device.
      - The state I(rendered) will transform the configuration in C(config) option to
        platform specific CLI commands which will be returned in the I(rendered) key
        within the result. For state I(rendered) active connection to remote host is
        not required.
      - The state I(gathered) will fetch the running configuration from device and transform
        it into structured data in the format as per the resource module argspec and
        the value is returned in the I(gathered) key within the result.
      - The state I(parsed) reads the configuration from C(running_config) option and
        transforms it into JSON format as per the resource module parameters and the
        value is returned in the I(parsed) key within the result. The value of C(running_config)
        option should be the same format as the output of command
        I(show running-config | section ^interface) executed on device. For state I(parsed) active
        connection to remote host is not required.
    type: str
"""
EXAMPLES = """
# Using merged
#
#
- name: Merge provided configuration with device configuration
  rucdev.ix.ix_interfaces:
    config:
      - name: GigaEthernet0.0
        description: Configured and Merged by Ansible Network
        enabled: true
    state: merged


# Using deleted

#
- name: Delete or return interface parameters to default settings
  rucdev.ix.ix_interfaces:
    config:
      - name: GigaEthernet0.0
    state: deleted



# Using overridden

- name: Overrides all device configuration with provided configuration
  rucdev.ix.ix_interfaces:
    config:
      - name: GigaEthernet0.0
        enabled: true
      - name: GigaEthernet1.0
        description: Configured and Overridden by Ansible Network
    state: overridden


# Using replaced

- name: Replaces device configuration of listed interfaces with provided configuration
  rucdev.ix.ix_interfaces:
    config:
      - name: GigaEthernet0.0
        description: Configured and Replaced by Ansible Network
        enabled: false
        mtu: 1200
    state: replaced


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.rucdev.ix.plugins.module_utils.network.ix.argspec.interfaces.interfaces import (
    InterfacesArgs,
)
from ansible_collections.rucdev.ix.plugins.module_utils.network.ix.config.interfaces.interfaces import (
    Interfaces,
)


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(
        argument_spec=InterfacesArgs.argument_spec, supports_check_mode=True
    )

    result = Interfaces(module).execute_module()
    module.exit_json(**result)


if __name__ == "__main__":
    main()
